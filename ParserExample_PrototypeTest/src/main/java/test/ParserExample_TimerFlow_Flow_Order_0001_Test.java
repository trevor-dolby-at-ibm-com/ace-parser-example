package test;

import java.io.InputStream;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import com.ibm.integration.test.v1.NodeSpy;
import com.ibm.integration.test.v1.SpyObjectReference;
import com.ibm.integration.test.v1.TestMessageAssembly;
import com.ibm.integration.test.v1.TestSetup;
import com.ibm.integration.test.v1.exception.TestException;

import static com.ibm.integration.test.v1.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

public class ParserExample_TimerFlow_Flow_Order_0001_Test {

	/*
	 * ParserExample_TimerFlow_Flow_Order_0001_Test
	 * Test generated by IBM App Connect Enterprise Toolkit 12.0.12.6 on Oct 22, 2024, 4:14:54 PM
	 */

	@AfterEach
	public void cleanupTest() throws TestException {
		// Ensure any mocks created by a test are cleared after the test runs 
		TestSetup.restoreAllMocks();
	}

	@Test
	public void ParserExample_TimerFlow_Flow_Order_TestCase_001() throws TestException {

		// Define the SpyObjectReference
		SpyObjectReference nodeReference = new SpyObjectReference().application("ParserExample")
				.messageFlow("TimerFlow").node("Flow Order");

		// Initialise a NodeSpy
		NodeSpy nodeSpy = new NodeSpy(nodeReference);

		// Declare a new TestMessageAssembly object for the message being sent into the node
		TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

		// Create a Message Assembly from the input data file
		try {
			String messageAssemblyPath = "/TimerFlow_Flow_Order_0001_4012b129-c8aa-447e-959c-eed4e0650b14_input_data.mxml";
			InputStream messageStream = Thread.currentThread().getContextClassLoader()
					.getResourceAsStream(messageAssemblyPath);
			if (messageStream == null) {
				throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
			}
			inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
		} catch (Exception ex) {
			throw new TestException("Failed to load input message", ex);
		}

		// Call the message flow node with the Message Assembly
		nodeSpy.evaluate(inputMessageAssembly, false, "in");

		// Assert the number of times that the node is called
		assertThat(nodeSpy, nodeCallCountIs(1));

		// Assert the terminal propagate count for the message
		assertThat(nodeSpy, terminalPropagateCountIs("second", 1));

		/*
		 * // Compare Output Message 1 at output terminal second
		 * 
		 * try { TestMessageAssembly actualMessageAssembly = null; TestMessageAssembly
		 * expectedMessageAssembly = null;
		 * 
		 * // Get the TestMessageAssembly object for the actual propagated message
		 * actualMessageAssembly = nodeSpy.propagatedMessageAssembly("second", 1);
		 * 
		 * // Assert output message body data // Get the TestMessageAssembly object for
		 * the expected propagated message expectedMessageAssembly = new
		 * TestMessageAssembly();
		 * 
		 * // Create a Message Assembly from the expected output mxml resource String
		 * messageAssemblyPath =
		 * "/TimerFlow_Flow_Order_0001_e0e2d722-c579-41aa-b99b-2ca662f45dcb_output_data.mxml";
		 * InputStream messageStream = Thread.currentThread().getContextClassLoader()
		 * .getResourceAsStream(messageAssemblyPath); if (messageStream == null) { throw
		 * new TestException("Unable to locate message assembly file: " +
		 * messageAssemblyPath); }
		 * expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
		 * 
		 * // Assert that the actual message tree matches the expected message tree
		 * //assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));
		 * 
		 * } catch (Exception ex) { throw new
		 * TestException("Failed to compare with expected message", ex); }
		 */
	}

}
